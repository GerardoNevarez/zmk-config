/*
 * Copyright (c) 2022 weteor
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BAS_L 0
#define SYM_L 2
#define NAV_L 3
#define NUM_L 4
#define CFG_L 5

// repeating space/backspace

&lt {
    quick_tap_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_slash {
            timeout-ms = <50>;
            key-positions = <1 11>;
            layers = <BAS_L>;
            bindings = <&kp SLASH>;
        };

        combo_lBracket {
            timeout-ms = <50>;
            key-positions = <2 12>;
            layers = <BAS_L>;
            bindings = <&kp LEFT_BRACKET>;
        };

        combo_lBrace {
            timeout-ms = <50>;
            key-positions = <3 13>;
            layers = <BAS_L>;
            bindings = <&kp LEFT_BRACE>;
        };

        combo_lParanthesis {
            timeout-ms = <50>;
            key-positions = <4 14>;
            layers = <BAS_L>;
            bindings = <&kp LEFT_PARENTHESIS>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <5 15>;
            layers = <BAS_L>;
            bindings = <&kp EQUAL>;
        };

        combo_asterix {
            timeout-ms = <50>;
            key-positions = <6 16>;
            layers = <BAS_L>;
            bindings = <&kp ASTERISK>;
        };

        combo_rParanthesis {
            timeout-ms = <50>;
            key-positions = <7 17>;
            layers = <BAS_L>;
            bindings = <&kp RIGHT_PARENTHESIS>;
        };

        combo_rBrace {
            timeout-ms = <50>;
            key-positions = <8 18>;
            layers = <BAS_L>;
            bindings = <&kp RIGHT_BRACE>;
        };

        combo_rBracket {
            timeout-ms = <50>;
            key-positions = <9 19>;
            layers = <BAS_L>;
            bindings = <&kp RIGHT_BRACKET>;
        };

        combo_bSlash {
            timeout-ms = <50>;
            key-positions = <10 20>;
            layers = <BAS_L>;
            bindings = <&kp BACKSLASH>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp BACKSPACE>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESCAPE>;
        };

        combo_cfgLayer {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&mo 5>;
        };

        combo_capsWord {
            timeout-ms = <50>;
            key-positions = <23 29>;
            bindings = <&caps_word>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <180>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    // COMBOS
    // vertical
    // -------------------------------     -------------------------------
    // |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  |
    // |  /  |  [  |  {  |  (  |  =  |     |  *  |  )  |  }  |  ]  |  \  |
    // |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  '  |
    //
    // others:
    // Q + W - escape
    // W + E - tab
    // I + O - backspace
    // C + , - word caps
    // both left bottom keys -> Layer CFG

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = " Base";
            bindings = <
&kp C_MUTE
   &kp TAB     &kp Q     &kp W  &kp E  &kp R  &kp T      &kp Y  &kp U      &kp I     &kp O     &kp P   &kp BSPC
   &kp ESC     &kp A     &kp S  &kp D  &kp F  &kp G      &kp H  &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
 &kp LSHFT     &kp Z     &kp X  &kp C  &kp V  &kp B      &kp N  &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
 &kp RCTRL  &kp LALT  &kp LGUI         &none  &mo 1  &kp SPACE  &mo 2             &kp LGUI  &kp LALT  &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp K_VOL_UP K_VOL_DN>;
        };

        NUM {
            bindings = <
&trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp EQUAL  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp MINUS  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp GRAVE  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans  &trans          &trans  &trans     &trans  &kp N0          &trans  &trans  &trans
            >;
        };

        NAV {
            bindings = <
&trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans          &trans  &trans    &trans    &trans             &trans  &trans  &trans
            >;
        };
    };
};

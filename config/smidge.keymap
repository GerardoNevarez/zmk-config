/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <200>;
};

&lt {
    quick-tap-ms = <400>;
};

&sk {
    release-after-ms = <2000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_b {
            bindings = <&kp B>;
            key-positions = <4 7>;
            layers = <0>;
        };

        combo_c {
            bindings = <&kp C>;
            key-positions = <6 7>;
            layers = <0>;
        };

        combo_d {
            bindings = <&kp D>;
            key-positions = <1 2 3>;
            layers = <0>;
        };

        combo_f {
            bindings = <&kp F>;
            key-positions = <2 3>;
            layers = <0>;
        };

        combo_g {
            bindings = <&kp G>;
            key-positions = <1 2>;
            layers = <0>;
        };

        combo_h {
            bindings = <&kp H>;
            key-positions = <5 7>;
            layers = <0>;
        };

        combo_j {
            bindings = <&kp J>;
            key-positions = <0 1>;
            layers = <0>;
        };

        combo_k {
            bindings = <&kp K>;
            key-positions = <4 6>;
            layers = <0>;
        };

        combo_l {
            bindings = <&kp L>;
            key-positions = <5 6 7>;
            layers = <0>;
        };

        combo_m {
            bindings = <&kp M>;
            key-positions = <4 5 6>;
            layers = <0>;
        };

        combo_n {
            bindings = <&kp N>;
            key-positions = <4 5>;
            layers = <0>;
        };

        combo_p {
            bindings = <&kp P>;
            key-positions = <4 7 5>;
            layers = <0>;
        };

        combo_q {
            bindings = <&kp Q>;
            key-positions = <0 1 3>;
            layers = <0>;
        };

        combo_u {
            bindings = <&kp U>;
            key-positions = <5 6>;
            layers = <0>;
        };

        combo_v {
            bindings = <&kp V>;
            key-positions = <0 2>;
            layers = <0>;
        };

        combo_w {
            bindings = <&kp W>;
            key-positions = <0 3>;
            layers = <0>;
        };

        combo_x {
            bindings = <&kp X>;
            key-positions = <0 1 2>;
            layers = <0>;
        };

        combo_z {
            bindings = <&kp Z>;
            key-positions = <0 1 2 3>;
            layers = <0>;
        };

        combo_ret {
            bindings = <&kp ENTER>;
            key-positions = <3 7>;
            layers = <0>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <4 2 3>;
            layers = <0>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <4 1 2 3>;
            layers = <0>;
        };

        combo_sk_ctrl {
            bindings = <&sk LCTRL>;
            key-positions = <0 7>;
            layers = <0>;
        };

        combo_sk_gui {
            bindings = <&sk LGUI>;
            key-positions = <0 6>;
            layers = <0>;
        };

        combo_sk_alt {
            bindings = <&sk LALT>;
            key-positions = <0 5>;
            layers = <0>;
        };

        combo_sk_shft {
            bindings = <&sk LSHFT>;
            key-positions = <0 1 2 7>;
            layers = <0>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <2 6>;
            layers = <0>;
        };

        combo_caps {
            bindings = <&kp CAPS>;
            key-positions = <4 5 6 3>;
            layers = <0>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <4 5 6 7>;
            layers = <0>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <2 7>;
            layers = <0>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <2 5>;
            layers = <0>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <5 3>;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <3 6>;
        };

        combo_apos {
            bindings = <&kp APOS>;
            key-positions = <5 6 3>;
            layers = <0>;
        };

        combo_slash {
            bindings = <&kp SLASH>;
            key-positions = <3 4>;
        };

        combo_excl {
            bindings = <&kp EXCL>;
            key-positions = <1 5>;
            layers = <0>;
        };

        combo_7 {
            bindings = <&kp N7>;
            key-positions = <2 3>;
            layers = <2>;
        };

        combo_8 {
            bindings = <&kp N8>;
            key-positions = <2 1>;
            layers = <2>;
        };

        combo_9 {
            bindings = <&kp N9>;
            key-positions = <6 7>;
            layers = <2>;
        };

        combo_0 {
            bindings = <&kp N0>;
            key-positions = <5 6>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &lt 2 S  &kp T  &kp R      &lt 1 A
  &lt 4 O  &kp I  &kp Y      &lt 3 E
                  &kp LSHFT  &kp SPACE  &mo 7
            >;
        };

        Brackets {
            bindings = <
  &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
  &kp LEFT_BRACE   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
                                         &bootloader            &trans  &trans
            >;
        };

        Numbers {
            bindings = <
  &trans  &kp N3  &kp N2   &kp N1
  &trans  &kp N6  &kp N5   &kp N4
                  &kp DOT  &kp FSLH  &kp MINUS
            >;
        };

        Punctuation {
            bindings = <
  &kp GRAVE  &kp SEMI   &kp BSLH      &kp EXCLAMATION
  &kp EQUAL  &kp MINUS  &kp QUESTION  &trans
                        &trans        &trans           &trans
            >;
        };

        FastNav {
            bindings = <
  &trans  &trans    &kp UP    &trans
  &trans  &kp LEFT  &kp DOWN  &kp RIGHT
                    &trans    &trans     &trans
            >;
        };

        Navigation {
            bindings = <
  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans
            >;
        };

        Mouse {
            bindings = <
  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans
            >;
        };

        System {
            bindings = <
  &bt BT_CLR    &trans        &trans        &out OUT_TOG
  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
                              &bootloader   &trans        &trans
            >;
        };

        Gaming {
            bindings = <
  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans
            >;
        };
    };
};
